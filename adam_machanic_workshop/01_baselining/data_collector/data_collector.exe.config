<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
	<!--DO NOT CHANGE ANYTHING IN THIS SECTION-->
    <section name="targetDatabase" type="DataCollector.TargetDatabaseConfig, data_collector" />
    <sectionGroup name="perfCounterCollector">
      <section name="counterInfo" type="DataCollector.CounterConfig, data_collector" />
      <section name="serverInfo" type="DataCollector.ServerConfig, data_collector" />
    </sectionGroup>
    <sectionGroup name="sqlCollector">
      <section name="queryInfo" type="DataCollector.QueryConfig, data_collector" />
      <section name="serverInfo" type="DataCollector.ServerConfig, data_collector" />
    </sectionGroup>
  </configSections>
  <!-- NOTE: Only integrated auth is supported at this time -->
  <targetDatabase>
    <!-- add instance="instancename" below as necessary -->
    <server name="localhost" database="baseline" />
  </targetDatabase>
  <perfCounterCollector>
    <counterInfo>
      <categories>
        <category name="Memory">
          <counters>
            <counter name="Available MBytes" />
            <counter name="Page Faults/sec" />
            <counter name="Pages/sec" />
          </counters>
        </category>
        <category name="Process">
          <counters>
            <counter name="Working Set" />
          </counters>
          <instances>
            <instance name="sqlservr" />
          </instances>
        </category>
        <category name="SQLServer:Memory Manager">
          <counters>
            <counter name="Memory Grants Pending" />
            <counter name="Optimizer Memory (KB)" />
            <counter name="Lock Memory (KB)" />
            <counter name="Granted Workspace Memory (KB)" />
            <counter name="Total Server Memory (KB)" />
            <counter name="Target Server Memory (KB)" />
          </counters>
        </category>
        <category name="SQLServer:Plan Cache">
          <counters>
            <counter name="Cache Pages" />
            <counter name="Cache Hit Ratio" />
          </counters>
        </category>
        <category name="SQLServer:Buffer Manager">
          <counters>
            <counter name="Total pages" />
            <counter name="Buffer cache hit ratio" />
            <counter name="Page life expectancy" />
          </counters>
        </category>
        <category name="LogicalDisk">
          <counters>
            <counter name="Avg. Disk sec/Read" />
            <counter name="Avg. Disk sec/Write" />
            <counter name="Disk Read Bytes/sec" />
            <counter name="Disk Write Bytes/sec" />
          </counters>
          <instances>
            <instance name="*" />
          </instances>
        </category>
        <category name="SQLServer:Wait Statistics">
          <counters>
            <counter name="Page IO latch waits" />
            <counter name="Network IO waits" />
          </counters>
          <instances>
            <instance name="Average wait time (ms)" />
            <instance name="Cumulative wait time (ms) per second" />
          </instances>
        </category>
        <category name="SQLServer:Access Methods">
          <counters>
            <counter name="Full Scans/sec" />
            <counter name="Range Scans/sec" />
            <counter name="Probe Scans/sec" />
            <counter name="Forwarded Records/sec" />
            <counter name="Page Splits/sec" />
            <counter name="Pages Allocated/sec" />
            <counter name="Table Lock Escalations/sec" />
          </counters>
        </category>
        <category name="Processor">
          <counters>
            <counter name="% Processor Time" />
          </counters>
          <instances>
            <instance name="_Total" />
          </instances>
        </category>
        <category name="SQLServer:SQL Statistics">
          <counters>
            <counter name="Auto-Param Attempts/sec" />
            <counter name="SQL Compilations/sec" />
            <counter name="SQL Re-Compilations/sec" />
          </counters>
        </category>
        <category name="Network Interface">
          <counters>
            <counter name="Bytes Received/sec" />
            <counter name="Bytes Sent/sec" />
            <counter name="Output Queue Length" />
          </counters>
        </category>
        <category name="SQLServer:General Statistics">
          <counters>
            <counter name="User Connections" />
            <counter name="Logins/sec" />
            <counter name="Logouts/sec" />
            <counter name="Active Temp Tables" />
            <counter name="Temp Tables Creation Rate" />
          </counters>
        </category>
        <category name="SQLServer:SQL Statistics">
          <counters>
            <counter name="Batch Requests/sec" />
          </counters>
        </category>
        <category name="SQLServer:Databases">
          <counters>
            <counter name="Transactions/sec" />
          </counters>
        </category>
        <category name="SQLServer:Locks">
          <counters>
            <counter name="Lock Requests/sec" />
            <counter name="Lock Wait Time (ms)" />
            <counter name="Average Wait Time (ms)" />
          </counters>
        </category>
        <category name="SQLServer:Latches">
          <counters>
            <counter name="Average Latch Wait Time (ms)" />
          </counters>
        </category>
      </categories>
    </counterInfo>
    <serverInfo>
      <servers>
        <server name="server1">
          <!--TODO: implement configuration so that someone can uncomment these to add or remove specific counters for a server
          <counterAdditions>
            <category name="*" />
          </counterAdditions>
          <counterExceptions>
            <category name="*" />
          </counterExceptions>
          -->
        </server>
		<!--Add as many servers as you like...-->
		<!--server name="AnotherServer">
		</server-->
      </servers>
    </serverInfo>
  </perfCounterCollector>
  <sqlCollector>
    <queryInfo>
      <queries>
        <query name="wait_stats" reuseConnection="true">
          <![CDATA[
IF OBJECT_ID('tempdb..#prior_waits') IS NULL
BEGIN
	SELECT
		*
	INTO #prior_waits
	FROM sys.dm_os_wait_stats AS w
	
	SELECT 
		*
	INTO #current_waits
	FROM #prior_waits
	WHERE
		1=0
END
ELSE
BEGIN	
	TRUNCATE TABLE #current_waits

	INSERT #current_waits WITH (TABLOCK)
	SELECT
		*
	FROM sys.dm_os_wait_stats AS w
	
  SELECT
    *
  FROM
  (
	  SELECT
		  CASE n.m
			  WHEN 1 THEN 
				  p.wait_type + ' (wait time)'
			  WHEN 2 THEN
				  p.wait_type + ' (wait count)'
			  WHEN 3 THEN
				  p.wait_type + ' (maximum)'
			  ELSE 
				  'SIGNAL_WAIT_TIME'
		  END AS wait_type,
		  CASE n.m
			  WHEN 1 THEN
				  (c.wait_time_ms - c.signal_wait_time_ms) - (p.wait_time_ms - p.signal_wait_time_ms) 
			  WHEN 2 THEN
				  c.waiting_tasks_count - p.waiting_tasks_count
			  WHEN 3 THEN
				  p.max_wait_time_ms
			  ELSE
				  SUM(CASE WHEN n.m = 1 AND c.wait_type <> 'SLEEP_TASK' THEN c.signal_wait_time_ms ELSE 0 END) OVER () - 
					  SUM(CASE WHEN n.m = 1 AND p.wait_type <> 'SLEEP_TASK' THEN p.signal_wait_time_ms ELSE 0 END) OVER ()
		  END AS wait_delta
	  FROM #prior_waits AS p
	  INNER JOIN #current_waits AS c ON
		  c.wait_type = p.wait_type
		  AND c.signal_wait_time_ms >= p.signal_wait_time_ms
	  CROSS APPLY
	  (
		  SELECT 1
		  UNION ALL
		  SELECT 2
		  UNION ALL
		  SELECT 3
		  WHERE
			  p.max_wait_time_ms > c.max_wait_time_ms
		  UNION ALL
		  SELECT 4
		  WHERE
			  p.wait_type = 'SOS_SCHEDULER_YIELD'
	  ) AS n (m)
	  WHERE
		  p.wait_type NOT IN ('MISCELLANEOUS', 'REQUEST_FOR_DEADLOCK_SEARCH', 'XE_TIMER_EVENT')
  ) AS x
  WHERE
    x.wait_delta >= 0
	
	TRUNCATE TABLE #prior_waits
	
	INSERT #prior_waits WITH (TABLOCK)
	SELECT
		*
	FROM #current_waits
END
          ]]>
        </query>
        <query name="file_stats" reuseConnection="true">
          <![CDATA[
IF OBJECT_ID('tempdb..#prior_waits') IS NULL
BEGIN
	SELECT
		d.name,
		w.*
	INTO #prior_waits
	FROM sys.dm_io_virtual_file_stats(NULL, NULL) AS w
	INNER JOIN sys.databases AS d ON
		d.database_id = w.database_id
	
	SELECT 
		*
	INTO #current_waits
	FROM #prior_waits
	WHERE
		1=0
END
ELSE
BEGIN	
	TRUNCATE TABLE #current_waits

	INSERT #current_waits WITH (TABLOCK)
	SELECT
		d.name,
		w.*
	FROM sys.dm_io_virtual_file_stats(NULL, NULL) AS w
	INNER JOIN sys.databases AS d ON
		d.database_id = w.database_id
	
	SELECT
		c.name + '(' + CONVERT(VARCHAR, c.file_id) + '):' +
			CASE x.n
				WHEN 1 THEN 'num_of_reads'
				WHEN 2 THEN 'num_of_bytes_read'
				WHEN 3 THEN 'io_stall_read_ms'
				WHEN 4 THEN 'num_of_writes'
				WHEN 5 THEN 'num_of_bytes_written'
				WHEN 6 THEN 'io_stall_write_ms'
				WHEN 7 THEN 'io_stall'
				WHEN 8 THEN 'size_on_disk_bytes (total)'
				WHEN 9 THEN 'size_on_disk_bytes (delta)'
			END AS metric,
		CASE x.n
			WHEN 1 THEN c.num_of_reads - p.num_of_reads
			WHEN 2 THEN c.num_of_bytes_read - p.num_of_bytes_read
			WHEN 3 THEN c.io_stall_read_ms - p.io_stall_read_ms
			WHEN 4 THEN c.num_of_writes - p.num_of_writes
			WHEN 5 THEN c.num_of_bytes_written - p.num_of_bytes_written
			WHEN 6 THEN c.io_stall_write_ms - p.io_stall_write_ms
			WHEN 7 THEN c.io_stall - p.io_stall
			WHEN 8 THEN c.size_on_disk_bytes
			WHEN 9 THEN c.size_on_disk_bytes - p.size_on_disk_bytes
		END AS metric_value
	FROM #prior_waits AS p
	INNER JOIN #current_waits AS c ON
		c.name = p.name
		AND c.file_id = p.file_id
		AND c.num_of_bytes_read >= p.num_of_bytes_read
	CROSS APPLY
	(
		SELECT 1
		UNION ALL
		SELECT 2
		UNION ALL
		SELECT 3
		UNION ALL
		SELECT 4
		UNION ALL
		SELECT 5
		UNION ALL
		SELECT 6
		UNION ALL
		SELECT 7
		UNION ALL
		SELECT 8
		UNION ALL
		SELECT 9
	) AS x (n)
	
	TRUNCATE TABLE #prior_waits
	
	INSERT #prior_waits WITH (TABLOCK)
	SELECT
		*
	FROM #current_waits
END
          ]]>
        </query>
        <query name="query_stats" reuseConnection="true">
          <![CDATA[
IF OBJECT_ID('tempdb..#prior_times') IS NULL
BEGIN
	SELECT
		query_hash,
		SUM(execution_count) AS execution_count,
		SUM(total_worker_time) AS total_worker_time,
		SUM(total_physical_reads) AS total_physical_reads,
		SUM(total_logical_reads) AS total_logical_reads,
		SUM(total_logical_writes) AS total_logical_writes,
		SUM(total_clr_time) AS total_clr_time,
		SUM(total_elapsed_time) AS total_elapsed_time
	INTO #prior_times
	FROM sys.dm_exec_query_stats
	GROUP BY
		query_hash
	
	SELECT 
		*
	INTO #current_times
	FROM #prior_times
	WHERE
		1=0
END
ELSE
BEGIN	
	TRUNCATE TABLE #current_times

	INSERT #current_times WITH (TABLOCK)
	SELECT
		query_hash,
		SUM(execution_count) AS execution_count,
		SUM(total_worker_time) AS total_worker_time,
		SUM(total_physical_reads) AS total_physical_reads,
		SUM(total_logical_reads) AS total_logical_reads,
		SUM(total_logical_writes) AS total_logical_writes,
		SUM(total_clr_time) AS total_clr_time,
		SUM(total_elapsed_time) AS total_elapsed_time
	FROM sys.dm_exec_query_stats
	GROUP BY
		query_hash
	
	SELECT
		CONVERT(VARCHAR, c.query_hash, 1) + ' : ' +
			CASE x.n
				WHEN 1 THEN 'execution count'
				WHEN 2 THEN 'worker time (avg)'
				WHEN 3 THEN 'physical reads (avg)'
				WHEN 4 THEN 'logical reads (avg)'
				WHEN 5 THEN 'logical writes (avg)'
				WHEN 6 THEN 'CLR time (avg)'
				WHEN 7 THEN 'elapsed time (avg)'
			END AS metric,
		CASE x.n
			WHEN 1 THEN c.execution_count - p.execution_count
			WHEN 2 THEN (c.total_worker_time - p.total_worker_time) / ISNULL(NULLIF((c.execution_count - p.execution_count), 0), 1)
			WHEN 3 THEN (c.total_physical_reads - p.total_physical_reads) / ISNULL(NULLIF((c.execution_count - p.execution_count), 0), 1)
			WHEN 4 THEN (c.total_logical_reads - p.total_logical_reads) / ISNULL(NULLIF((c.execution_count - p.execution_count), 0), 1)
			WHEN 5 THEN (c.total_logical_writes - p.total_logical_writes) / ISNULL(NULLIF((c.execution_count - p.execution_count), 0), 1)
			WHEN 6 THEN (c.total_clr_time - p.total_clr_time) / ISNULL(NULLIF((c.execution_count - p.execution_count), 0), 1)
			WHEN 7 THEN (c.total_elapsed_time - p.total_elapsed_time) / ISNULL(NULLIF((c.execution_count - p.execution_count), 0), 1)
		END AS metric_value
	FROM #prior_times AS p
	INNER JOIN #current_times AS c ON
		c.query_hash = p.query_hash
		AND c.execution_count > p.execution_count
	CROSS APPLY
	(
		SELECT 1
		UNION ALL
		SELECT 2
		UNION ALL
		SELECT 3
		UNION ALL
		SELECT 4
		UNION ALL
		SELECT 5
		UNION ALL
		SELECT 6
		UNION ALL
		SELECT 7
	) AS x (n)
	
	TRUNCATE TABLE #prior_times
	
	INSERT #prior_times WITH (TABLOCK)
	SELECT
		*
	FROM #current_times

	--populate info into the "dba" database
	--change this if you don't want this script automatically creating databases, etc
	IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = 'dba')
	BEGIN
		EXEC('CREATE DATABASE dba')
	END

	IF OBJECT_ID('dba.dbo.query_info') IS NULL
	BEGIN
		EXEC
		('
			CREATE TABLE dba.dbo.query_info
			(
				query_hash BINARY(8) NOT NULL,
				query_plan_hash BINARY(8) NOT NULL,
				query_text NVARCHAR(MAX),
				query_plan NVARCHAR(MAX),
				PRIMARY KEY (query_hash, query_plan_hash)
			)
		')
	END
	
	INSERT dba.dbo.query_info
	(
		query_hash,
		query_plan_hash,
		query_text,
		query_plan		
	)
	SELECT
		x.query_hash,
		x.query_plan_hash,	
		(
			SELECT
				SUBSTRING
				(
					est.text,
					((x.statement_start_offset/2) + 1),
					(
						CASE
							WHEN x.statement_end_offset = -1 THEN 2147483647
							ELSE ((x.statement_end_offset - x.statement_start_offset)/2) + 1
						END
					)
				) AS query_text
			FROM sys.dm_exec_sql_text(x.sql_handle) AS est
		) AS query_text,
		(
			SELECT
				etq.query_plan
			FROM sys.dm_exec_text_query_plan(x.plan_handle, x.statement_start_offset, x.statement_end_offset) AS etq
		) AS query_plan
	FROM #current_times AS c
	CROSS APPLY
	(
		SELECT
			qs.query_hash,
			qs.query_plan_hash,
			qs.sql_handle,
			qs.plan_handle,
			qs.statement_start_offset,
			qs.statement_end_offset,
			ROW_NUMBER() OVER
			(
				PARTITION BY
					qs.query_hash,
					qs.query_plan_hash
				ORDER BY
					(SELECT NULL)
			) AS r
		FROM sys.dm_exec_query_stats AS qs
		WHERE
			c.query_hash = qs.query_hash
			AND NOT EXISTS
			(
				SELECT *
				FROM dba.dbo.query_info AS qi			
				WHERE
					qi.query_hash = qs.query_hash
					AND qi.query_plan_hash = qs.query_plan_hash
			)
	) AS x
	WHERE
		x.r = 1
END
          ]]>
        </query>
      </queries>
    </queryInfo>
    <serverInfo>
      <servers>
        <server name="server1" database="master" />
		  <!--Again, add as many servers as you like-->
		  <!--server name="AnotherServer" database="master" /-->
        <!--TODO: implement query exceptions and additions-->
      </servers>
    </serverInfo>
  </sqlCollector>
</configuration>